

用于快速开发通过串口通信响应的交互框架；构造相对简单，如有必要，可手动扩展；

用法：
1，初始化，设定输入缓存大小和输出缓存大小；
SerialCom(int inputBufferLength=256, int outputBufferLength=256);

2，注册命令，一个命令对应唯一一个处理函数，详细见下文；
RegistCMD(const string & cmdWithArgs, void * handler);

3，撤销命令，用于取消一个命令的注册，让他不再可用；
UnRegisterCMD(const string & cmd);
3.1 检查是否存在注册的命令
bool HasCMD(const string & cmd);

4，命令执行和反馈，在循环中无限执行下面两个方法即可；
WaitForInput();
ProcessNOutput();


细节：
注册命令时，需要命令行模板和处理函数，其中；
处理函数必须继承给定的虚拟类，需要手动实现具体的方法；
命令行模板则需要遵循下面格式：
命令  参数标记1 参数类型  参数标记2 参数类型 ....
如 DoSomeThing  -t L   -s S
其中標記前面可以加 - /，也可以不加，登記時不會記錄前面的符號；
* 区分大小写，包括命令和参数；
* 数据类型 L-长整型，D-双精度，S-字符串
* 命令模板必須包含全部參數，且參數順序和handler參數輸入順序也必須一致；

框架中需要维护方法指针定义来满足实际需求，
首先确定 CMDInfo.h 中的 HandlerTpls，是否包含需要的所有方法所需定义；
如果需要维护，那么CMDInfo.cpp 中 InvokeWithLastArgs() 也需要匹配维护；

使用命令时：
* 用戶使用時，參數順序可以隨意，但最終整理出來的參數順序和登記時的一致；
例如 DoSomeThing -t 1234  -s "Hi, Tom."
*注意参数中如果出现空格，则必须用双引号包裹；
* 字符串參數，如果存在空格，則必須用雙引號括起來；


例子：

// 在main之前，或其他方法库中定义
string Test()
{
    string result("Hello!");
    return result;
}
string Echo(const string &msg)
{
    string result(msg);
    return result;
}
string CalAdd(int a, int b)
{
    string result(32, '\0');
    // result.reserve(32);
    sprintf(&result[0], "%d", a + b);
    return result;
}

// 在main中
    SerialCom *sc = new SerialCom(128, 128);
    sc->RegisterCMD("Test", (void *)Test);
    sc->RegisterCMD("Echo -msg S", (void *)Echo);
    sc->RegisterCMD("CalAdd -a L -b L", (void *)CalAdd);

    while (true)
	{
		try
		{
			sc->WaitForInput();
			sc->ProcessNOutput();

			if (sc->HasCMD("Test"))
			{
				printf("Test remove test.\n");
				string cmd1("Test");
				if (sc->UnRegisterCMD(cmd1) == true)
				{
					printf("Test() has been unregistered.\n");
				}
			}
		}
        catch (char *errMsg)
        {
            printf("ErrC: %s\n", errMsg);
            free(errMsg);
            // break;
        }
        catch (string &errMsg1)
        {
            printf("ErrS: %s\n", errMsg1.c_str());
            // break;
        }
        catch (const std::exception &e)
        {
            printf("ErrE: %s\n", e.what());
            // break;
        }
        catch (...)
        {
            printf("Other Err.\n");
            // break;
        }
	}





